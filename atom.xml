<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lrving`s Blog</title>
  <icon>https://www.gravatar.com/avatar/9c2536db89f37a92e8b73c880ff0628e</icon>
  <subtitle>–- 要技艺超群，要予人温暖</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lwju.xyz/"/>
  <updated>2019-11-11T10:14:05.085Z</updated>
  <id>http://lwju.xyz/</id>
  
  <author>
    <name>Lrving</name>
    <email>1018610468@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA笔记(一):基本数据类型和运算符</title>
    <link href="http://lwju.xyz/Java/Javanote1/"/>
    <id>http://lwju.xyz/Java/Javanote1/</id>
    <published>2019-11-11T10:07:25.000Z</published>
    <updated>2019-11-11T10:14:05.085Z</updated>
    
    <content type="html"><![CDATA[<p><strong>1.标识符</strong></p><p>标识符是用来给变量、类、方法、以及包进行命名的。</p><a id="more"></a><ul><li>标识符需遵循一定的规则：</li><li>标识符必须以字母、下划线_、美元符号$开头。</li><li>标识符其它部分可以是字母、下划线“_”、美元符“$”和数字的任意组合。</li><li>Java 标识符大小写敏感，且长度无限制。</li><li>标识符不可以是Java的关键字。</li></ul><p><strong>标识符的使用规范</strong></p><ul><li>表示类名的标识符：每个单词的首字母大写。</li><li>表示变量和方法的标识符：第一个单词小写，从第二个单词首字母大写，称为“驼峰命名原则”。</li></ul><p><strong>2.变量</strong></p><blockquote><p>变量的定义是： 用来命名一个数据的标识符</p></blockquote><p><code>int year = 1949;</code></p><p>int 是数据类型，表示是整数<br>year 是一个标识符<br>= 是赋值操作符<br>1949 是一个数字类型的值<br>; 表示该行结束<br><strong>2.1变量的基本类型</strong><br>一个变量的类型，决定了该变量可以包含什么样的值。<br>Java中有八种基本类型，都是Java语言预先定义好的，并且是关键字。</p><ul><li><strong>数值型</strong>－ byte、 short、int、 long、float、 double</li><li><strong>字符型</strong>－ char</li><li><strong>布尔型</strong>－boolean </li></ul><p><strong>3.常量</strong><br>常量通常指的是一个固定的值，例如：1、2、3、’a’、’b’、true、false、”helloWorld”等。</p><p><strong>3.1变量和常量命名规范：</strong><br>所有变量、方法、类名：见名知意<br>类成员变量：首字母小写和驼峰原则:  monthSalary<br>局部变量：首字母小写和驼峰原则<br>常量：大写字母和下划线：MAX_VALUE<br>类名：首字母大写和驼峰原则:  Man, GoodMan<br>方法名：首字母小写和驼峰原则: run(), runRun()在Java语言中，主要是利用关键字final来定义一个常量。 常量一旦被初始化后不能再更改其值。<br><strong>4.运算符</strong></p><ul><li><p>算数操作符基本的有：+  -  *  / %</p></li><li><p>自增 自减 :++ –</p></li><li><p>关系操作符: 比较两个变量之间的关系&gt; 大于&gt;= 大于或等于&lt; 小于&lt;= 小于或等于== 是否相等!= 是否不等</p></li><li><p>逻辑运算符<br>&amp; &amp;&amp; 长路与 和 短路与<br>|   ||    长路或 和 短路或<br>!        取反<br>^       异或^</p><ul><li>赋值运算 = </li><li>三元运算  <code>x ? y : z</code></li><li>字符串连接符<br>“+”运算符两侧的操作数中只要有一个是字符串(String)类型，系统会自动将另一个操作数转换为字符串然后再进行连接。</li></ul></li></ul><p><strong>5.类型转换</strong></p><blockquote><p>5.1  自动类型转换：容量小的数据类型可以自动转换为容量大的数据类型</p></blockquote><blockquote><p>5.2  强制类型转换，又被称为造型，用于显式的转换一个数值的类型。在有可能丢失信息的情况下进行的转换是通过造型来完成的，但可能造成精度降低或溢出。</p></blockquote><p><strong>语法格式：</strong><br><code>(type)var</code><br>运算符“()”中的type表示将值var想要转换成的目标数据类型</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;1.标识符&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;标识符是用来给变量、类、方法、以及包进行命名的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="http://lwju.xyz/categories/Java/"/>
    
    
      <category term="Java" scheme="http://lwju.xyz/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Css float浮动</title>
    <link href="http://lwju.xyz/Css/cssfloat/"/>
    <id>http://lwju.xyz/Css/cssfloat/</id>
    <published>2019-11-11T09:49:28.000Z</published>
    <updated>2019-11-11T10:05:06.665Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CSS浮动是什么</strong></p><p>float元素也称为浮动元素，设置了float属性的元素会根据属性值向左或向右浮动。</p><p>浮动元素会从普通文档流中脱离，但浮动元素影响的不仅是自己，它会影响周围的元素对齐进行环绕。</p><p>简单来说，就是让block元素无视float元素，让inline元素让流水一样围绕着float元素来实现浮动布局。 </p><blockquote><p>文字环绕图片是float典型的应用场景。<br>float元素设计的初衷虽然是文字环绕图片,但是目前其最广泛的应用却是在布局领域。</p></blockquote><a id="more"></a><h5 id="浮动带来的问题–高度塌陷"><a href="#浮动带来的问题–高度塌陷" class="headerlink" title="浮动带来的问题–高度塌陷"></a>浮动带来的问题–高度塌陷</h5><blockquote><p>由于设置了float后元素脱离了标准流，从而导致了高度的塌陷，这里有一个很直观的例子</p></blockquote><h5 id="标准流：就是浏览器默认摆放盒子的顺序（从上往下、从左往右）"><a href="#标准流：就是浏览器默认摆放盒子的顺序（从上往下、从左往右）" class="headerlink" title="标准流：就是浏览器默认摆放盒子的顺序（从上往下、从左往右）"></a><strong>标准流：就是浏览器默认摆放盒子的顺序（从上往下、从左往右）</strong></h5><ul><li><p><strong>浮动的元素会脱离标准流（脱标）</strong><br><img src="/images/hehe1.png" alt=""></p></li><li><p><strong>浮动的元素会覆盖在标准流的元素之上</strong><br><img src="/images/fu3.png" alt=""></p></li></ul><ul><li><strong>浮动的规则：浮动找浮动</strong><blockquote><p>浮动元素排列的时候，会找上一个浮动元素的后面<br><img src="/images/fu1.png" alt=""></p></blockquote></li></ul><ul><li><p><strong>浮动的重点：浮动的元素只会影响下面的元素</strong></p><blockquote><p>浮动的元素受到上一个盒子边界的限制（块级元素独占一行）</p></blockquote></li><li><p>浮动的元素有特殊的显示效果</p><ul><li>可以设置宽高<ul><li>行可以显示多个<blockquote><p>注意：浮动元素不能使用text-align或者margin：0 auto居中！</p></blockquote></li></ul></li></ul></li></ul><p><strong>记忆：</strong></p><blockquote><ol><li>浮动元素会脱标 ==&gt; 飘起来了（不占位置） ==&gt; 比标准流高半个级别</li><li>浮动元素会受到上一个盒子边界的影响</li><li>浮动元素可以设置宽高，一行可以显示多个</li></ol></blockquote><h4 id="如何解决塌陷–清除浮动"><a href="#如何解决塌陷–清除浮动" class="headerlink" title="如何解决塌陷–清除浮动"></a>如何解决塌陷–清除浮动</h4><h4 id="清除浮动（清除浮动的影响）"><a href="#清除浮动（清除浮动的影响）" class="headerlink" title="清除浮动（清除浮动的影响）"></a>清除浮动（清除浮动的影响）</h4><blockquote><p>浮动带来的问题：浮动元素撑不开父级容器</p></blockquote><h3 id="清除浮动主流方法有两种"><a href="#清除浮动主流方法有两种" class="headerlink" title="清除浮动主流方法有两种:"></a>清除浮动主流方法有两种:</h3><blockquote><p>(1）使用clear属性清除浮动；<br>(2）给父元素设置 overflow:hidden;</p></blockquote><h4 id="1-利用clear属性"><a href="#1-利用clear属性" class="headerlink" title="1.利用clear属性"></a>1.利用clear属性</h4><p>在父元素里面的最后的添加一个块级元素给添加的块级元素设置清除浮动的核心代码 clear:both;</p><blockquote><p>缺点： 需要在页面中添加额外的标签，让页面的HTML结构变得更加复杂 有违结构与表现的分离</p></blockquote><p><strong>方式一：在设置float的兄弟元素最后设置一个元素，对其设置clear属性，如下</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.div1</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span><span class="selector-pseudo">:blue</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.div2</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:10px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.clearfix</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这里是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"div2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方式二： 方式一的缺点还是很明显的，就是平白无故的新增了一个没有内容的元素，使页面出现冗余；这里可以利用伪元素来达到同样的效果</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">示列一：</span><br><span class="line"><span class="selector-tag">main</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>:<span class="string">""</span>;</span><br><span class="line"><span class="attribute">display</span>:block;  </span><br><span class="line"><span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"> 示列二：单伪元素清除法</span><br><span class="line"> 一般伪元素清除法会使用 <span class="selector-class">.clearfix</span> 这个类名</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;    </span><br><span class="line"><span class="comment">/*伪元素必加的属性*/</span>   </span><br><span class="line">       <span class="attribute">content</span>: <span class="string">''</span>; </span><br><span class="line"><span class="comment">/*转换为块级元素*/</span>  </span><br><span class="line">      <span class="attribute">display</span>: block; </span><br><span class="line"><span class="comment">/*清除浮动的核心代码*/</span>   </span><br><span class="line">       <span class="attribute">clear</span>: both;</span><br><span class="line"><span class="comment">/*其实有上面三个属性已经可以生效了，但是可能在开发的时候，会有额外的几个属性！！*/</span></span><br><span class="line"><span class="comment">/*目的：在页面中看不到伪元素*/</span>  </span><br><span class="line"><span class="comment">/*避免生成内容破坏原有布局的高度。*/</span></span><br><span class="line">       <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">       <span class="attribute">line-height</span>: <span class="number">0</span>; </span><br><span class="line"><span class="comment">/*使生成的内容不可见，并允许可能被生成内容盖住的内容可以进行点击和交互;*/</span></span><br><span class="line">       <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line">`</span><br></pre></td></tr></table></figure><blockquote><p>伪元素由CSS渲染，不会增加额外的html标签（兼容性各方面综合最佳）</p></blockquote><h4 id="2-使用-overflow-清除浮动"><a href="#2-使用-overflow-清除浮动" class="headerlink" title="2.使用 overflow 清除浮动"></a>2.使用 overflow 清除浮动</h4><p>在某些特定场景下使用不了步骤：直接给父元素设置 overflow:hidden;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">main</span>&#123;</span><br><span class="line"><span class="attribute">overflow</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>优点：不存在结构和语义化问题，代码量极少</p></blockquote><blockquote><p>缺点：overflow:hidden 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素； overflow:auto多层嵌套后，firefox与IE 可能会出现显示错误；</p></blockquote><h5 id="3-设置高度"><a href="#3-设置高度" class="headerlink" title="3.设置高度"></a>3.设置高度</h5><blockquote><p>直接给父元素设置高度 简单粗暴，但是不推荐，不利于后期维护</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;CSS浮动是什么&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;float元素也称为浮动元素，设置了float属性的元素会根据属性值向左或向右浮动。&lt;/p&gt;
&lt;p&gt;浮动元素会从普通文档流中脱离，但浮动元素影响的不仅是自己，它会影响周围的元素对齐进行环绕。&lt;/p&gt;
&lt;p&gt;简单来说，就是让block元素无视float元素，让inline元素让流水一样围绕着float元素来实现浮动布局。 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文字环绕图片是float典型的应用场景。&lt;br&gt;float元素设计的初衷虽然是文字环绕图片,但是目前其最广泛的应用却是在布局领域。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Css" scheme="http://lwju.xyz/categories/Css/"/>
    
    
      <category term="css" scheme="http://lwju.xyz/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS外边距margin重叠和塌陷</title>
    <link href="http://lwju.xyz/Css/css-margin-collapse/"/>
    <id>http://lwju.xyz/Css/css-margin-collapse/</id>
    <published>2019-11-11T09:25:22.000Z</published>
    <updated>2019-11-11T09:43:16.211Z</updated>
    
    <content type="html"><![CDATA[<p>&nbsp; &nbsp;  &nbsp; &nbsp;合并现象就是所谓的外边距重叠，当两个垂直外边距相遇时，它们将形成一个外边距。合并的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p><p>&nbsp; &nbsp;  &nbsp; &nbsp;margin 塌陷 是在CSS的盒子模型中出现的一种现象，描述的是当父元素包裹着一个子元素的时候，当给子元素设置margin-top属性时，此时只是想让子元素的边框距离父元素边框有一段距离，而却出现了父元素的顶端距离body这个边框出现了位移，这就是margin-top塌陷的现象。</p><p>  <strong>CSS margin collapse 就是边界塌陷或者说是边界重叠</strong></p><a id="more"></a><h4 id="首先了解下BFC"><a href="#首先了解下BFC" class="headerlink" title="首先了解下BFC"></a>首先了解下BFC</h4><p>  &nbsp; &nbsp;  &nbsp; &nbsp;<strong>BFC</strong>: <code>block formating context</code> - 块级格式化上下文，每一个盒子当中都有一套正常的渲染规则，但是我们可以通过一些语法，来触发bfc，让这个盒子的渲染规则不一样！ 就是这个渲染规则的改变，刚好就解决了margin塌陷的问题，下面是触发bfc的语法：</p><blockquote><ol><li>position： absolute；</li><li>display：inline-block;</li><li>float：left / right;</li><li>overflow: hidden;</li></ol></blockquote><h4 id="BFC作用"><a href="#BFC作用" class="headerlink" title="BFC作用"></a>BFC作用</h4><p><strong>消除Margin Collapse</strong></p><p>在正常情况下，在一个容器内的所有box将会由上至下依次垂直排列，即我们所说的一个元素占一行，并切垂直相邻的距离(即margin)是由各自的margin决定的，而不是两个margin的叠加。</p><h3 id="margin的特殊现象"><a href="#margin的特殊现象" class="headerlink" title="margin的特殊现象"></a>margin的特殊现象</h3><hr><h4 id="margin-重叠现象"><a href="#margin-重叠现象" class="headerlink" title="margin 重叠现象"></a>margin 重叠现象</h4><p>正常情况下: 当两个盒子水平布局时,左右的margin会叠加；<br> 但是当两个盒子垂直布局时，会出现合并现象<br> 两者之间距离全部都为正值，取最大者；没有正值，则都取绝对值，然后用0减去最大值</p><h6 id="正常现象："><a href="#正常现象：" class="headerlink" title="正常现象："></a>正常现象：</h6><blockquote><p>比如：当两个盒子水平布局时，左右的margin会叠加，盒子之间的距离为margin的和。</p></blockquote><h6 id="合并现象："><a href="#合并现象：" class="headerlink" title="合并现象："></a>合并现象：</h6><blockquote><p>当两个盒子垂直布局时，上下的margin会合并，盒子之间的距离为margin的最大值</p></blockquote><h5 id="重叠现象解决方案："><a href="#重叠现象解决方案：" class="headerlink" title="重叠现象解决方案："></a>重叠现象解决方案：</h5><ol><li><strong>相邻元素</strong><ul><li>底部元素设置为浮动 float:left;</li><li>底部元素的position的值为absolute/fixed</li><li>在设置margin-top/bottom值时统一设置上或者下</li></ul></li></ol><ol start="2"><li><strong>嵌套元素</strong></li></ol><ul><li>外层元素添加padding</li><li>外层元素 overflow:hidden;</li><li>外层元素透明边框 border:1px solid transparent;</li><li>内层元素绝对定位 postion:absolute:</li><li>内层元素 加float:left;或display:inline-block;</li></ul><hr><h3 id="margin的塌陷现象（重要）"><a href="#margin的塌陷现象（重要）" class="headerlink" title="margin的塌陷现象（重要）"></a>margin的塌陷现象（重要）</h3><p>互相嵌套的块级元素，垂直外边距会塌陷</p><h4 id="塌陷现象："><a href="#塌陷现象：" class="headerlink" title="塌陷现象："></a>塌陷现象：</h4><p>互相嵌套的块级元素，如果给子元素设置margin-top，此时父元素会一起往下移动！！！</p><h4 id="盒子塌陷"><a href="#盒子塌陷" class="headerlink" title="盒子塌陷"></a>盒子塌陷</h4><p>   &nbsp; &nbsp; 当父元素没设置足够大小的时候，而子元素设置了浮动的属性，子元素就会跳出父元素的边界（脱离文档流），尤其是当父元素的高度为auto时，而父元素中又没有其它非浮动的可见元素时，父盒子的高度就会直接塌陷为零， 我们称这是 CSS 高度塌陷。</p><h4 id="塌陷解决方法"><a href="#塌陷解决方法" class="headerlink" title="塌陷解决方法"></a>塌陷解决方法</h4><ol><li>给父元素增加边框。</li><li>给父盒子加<code>padding-top</code></li><li>给父元素设置<code>display：table;</code></li><li>利用浮动给外部的父盒子也添加浮动，让其也脱离标准文档流，但是对页面的布局不是很好，不易维护。</li><li>给父元素添加<code>position:fixed;</code>定位的知识，将父元素显示在固定位置，就不会受margin-top塌陷的问题影响</li><li>父盒子里最下方引入清除浮动块。最简单的有：<code>&lt;br style=&quot;clear:both;&quot;/&gt;</code></li><li>父盒子设置属性<code>overflow: hidden</code> （该属性触发了父盒子的BFC：块级格式化上下文）<ul><li><code>overflow:auto;</code> 有可能出现滚动条，影响美观。</li><li><code>overflow:hidden;</code> 可能会带来内容不可见的问题。</li></ul></li><li>伪元素清除浮动。<ul><li>外部盒子的after伪元素设置clear属性。</li><li>使用伪元素有一个必加属性 <code>content:&#39;&#39;</code>;content属性值里写标签里面的问题</li><li>伪元素默认是行内元素<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#parent</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">            <span class="attribute">clear</span>: both;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;nbsp; &amp;nbsp;  &amp;nbsp; &amp;nbsp;合并现象就是所谓的外边距重叠，当两个垂直外边距相遇时，它们将形成一个外边距。合并的外边距的高度等于两个发生合并的外边距的高度中的较大者。&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp;  &amp;nbsp; &amp;nbsp;margin 塌陷 是在CSS的盒子模型中出现的一种现象，描述的是当父元素包裹着一个子元素的时候，当给子元素设置margin-top属性时，此时只是想让子元素的边框距离父元素边框有一段距离，而却出现了父元素的顶端距离body这个边框出现了位移，这就是margin-top塌陷的现象。&lt;/p&gt;
&lt;p&gt;  &lt;strong&gt;CSS margin collapse 就是边界塌陷或者说是边界重叠&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Css" scheme="http://lwju.xyz/categories/Css/"/>
    
    
      <category term="css" scheme="http://lwju.xyz/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>雨后味道</title>
    <link href="http://lwju.xyz/%E9%9A%8F%E7%AC%94/hello-world/"/>
    <id>http://lwju.xyz/随笔/hello-world/</id>
    <published>2019-10-17T14:49:11.645Z</published>
    <updated>2019-11-11T09:16:18.532Z</updated>
    
    <content type="html"><![CDATA[<p> 刚下过雨的窗外，空气弥漫丝丝清爽。树叶经过雨水的洗礼，更显的勃勃生机。虽是初夏，但也沁出令人舒适的凉意。起笔于夜幕临近之际，似乎有一种空无的“古意”，溢于身心。</p><p>一天的忙碌即将结束，提笔回想，这样的“一天已经过去太多了，明天也会是今天与昨天的翻版吗”<br>对于太多人来说，答案是确定的。我身边的亦是如此……..</p><a id="more"></a><blockquote><p>蠢蠢欲动的夏日，闷热难当。这雨又是世间神奇之物，带着一丝清凉，慢慢爬过窗棂，蔓延至屋内，拂去这一身浮躁。</p></blockquote><p> <img src="/images/rain.jpg" alt=""><br> <img src="/images/rain1.jpg" alt=""></p><p> 昨天的雨很突然，前几天的天气特别闷热心情也随之浮躁起来。按计划本来今天是应该去跑步的，结果被突如其来的一场大雨堵在了宿舍，万般心绪也只得暂压心底。吃过晚饭过后就回到了宿舍，下雨的时候给人感觉很舒适，可以放空自己的思绪，没有写文章的琐碎和烦心的焦躁。揣着清凉凉的一颗心望着窗外的大雨。</p><p> 夜幕又一次降临，如约而至。</p><p> 夜晚不像晌午那么浮躁，不像清晨那么慌忙。终于有这么一个安静的时间，可以让自己回想着一些过往，想着不妨乘着记忆尚未遗失，在这里记下曾经自己的一些生活经历，或许日后可以翻出来给自己看看，让自己了解一些遥远的故事和这里真实发生过的一切。</p><hr><p> 六月又是一场盛大的毕业季，是分别亦是开始。后天又是一年一度的高考拉开了帷幕，为此等待的莘莘学子奔赴考场，祝赴考学子旗开得胜。此时内心有些复杂,那种感慨…..不由得把自己的思绪拉回到了职高散漫懒惰的生活,由于某些原因我选择了单招没有参加高考，内心没有遗憾是假的，毕竟当初的我也是励志要参加高考。回忆起来不知道我那几年究竟干了什么，职高的生活过的浑浑噩噩，就这样一天天的开始、结束开始、结束，仿佛就是一个无尽的循环，在这个循环中耗尽自己本应该丰富的生活。</p><p>毕竟人类的大脑都是倾向于舒适和懒惰的，谁都知道花一个或几个小时看看美剧或刷刷微博，是容易的，时间在感知上也是，刷一下就过去了。学英语、学一门新的编程语言、写博客是痛苦的，有时候你甚至会有意识的去避免开始这件事情，先干点这个，再干点那个，熬到最后，发现没时间了，再拿起书来读一会，困了，今天先睡吧。就这样，一天天很快过去了，你发现自己似乎每天都在坚持，但依然没效果。但事实是，你既没坚持，也没效率。</p><p>逐渐思绪又拉回了现实，抬起头，看了眼窗外，依然下着雨。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 刚下过雨的窗外，空气弥漫丝丝清爽。树叶经过雨水的洗礼，更显的勃勃生机。虽是初夏，但也沁出令人舒适的凉意。起笔于夜幕临近之际，似乎有一种空无的“古意”，溢于身心。&lt;/p&gt;
&lt;p&gt;一天的忙碌即将结束，提笔回想，这样的“一天已经过去太多了，明天也会是今天与昨天的翻版吗”&lt;br&gt;对于太多人来说，答案是确定的。我身边的亦是如此……..&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lwju.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>大一生活现状</title>
    <link href="http://lwju.xyz/%E9%9A%8F%E7%AC%94/Life/"/>
    <id>http://lwju.xyz/随笔/Life/</id>
    <published>2019-06-23T08:20:24.000Z</published>
    <updated>2019-11-11T09:16:05.051Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="blockquote-center"> 不管生活怎样总有一道属于你的明媚阳光用你的脚步走出自己的风景</blockquote><p>&ensp; &ensp; 不知不觉大一就这样结束了，没事的时候总喜欢回忆这一年里发生的一切，所以会把回忆记录在博客里， 感觉自己学会了很多knowledge，明白了很多的事理，经历过心态的起伏，但是我一直坚持着做一个真正的我。成长中的自己很开心。</p><a id="more"></a><p>&ensp;　&ensp; 时间向水中的倒影，一晃一学年就过去了，昨日还在埋怨时间过的太慢的情愫似乎还在游移在脑际，而今大二的生活正在向我走来，蓦然回首，感慨颇多。</p><p>&ensp; &ensp;   刚迈入大学的时候对一切似乎都充满新鲜感，但是现在一切归于平静。大一学年我除了完成自己的学习目标,也利用摄影丰富自己的生活,摆脱现在大学生最流行的郁闷日子。</p><p>&ensp; &ensp;  在学习上，我认为还有一样东西是非常重要的，那就是学习态度！我以前对学习的态度不是很端正，常常都是“得过且过”，不过现在好多了，我开始养成一种很好的学习态度。</p><p>&ensp; &ensp; 在生活上，我基本上都可以和同学们友好相处。六个人生活在同一个空间里面，但是各自的生活习性都不相，这就需要大家互相理解和迁就，只有这样才能和平相处，为我们的学习创造一个良好的学习和休息环境。</p><p>&ensp; &ensp; 大学就相当于一个小型的社会，作为一个步入社会的缓冲，我们可以从中学到好多的东西。</p><p>&ensp; &ensp; 大学真的有非常非常多的自由时间，而第一学期自己有一些迷茫则是因为自己没有认真规划自己的时间，忙的时候会手忙脚乱，没有事的时候则闲到发慌，最后导致自己宝贵的时间渐渐溜走，最后发现自己收获很少。而在暑假，我需要更认真的思考这一年自己在生活上的缺点，思考大二自己该如何规划。</p><p>&ensp;  &ensp; 在闲余的时间都用来干嘛？看知乎，偶尔会看一部电影，看书。都是些平常的生活。</p><p>&ensp;  &ensp; 这一年 我渐渐的找到了自己的人生方向，对于现在的生活，每天过的很安静，不停的接触新的知识，这一学年学的知识算是多而不精，现在的方向是往前端学习，这学期刚刚接触了简单的HTML，CSS知识，还在学习JavaScript基础，暑假期间可能是学习的时间不会太多了，等到下学期继续巩固前端所需要的知识框架吧！</p><p>&ensp; &ensp;  期待自己可以在以后的道路中，努力前行，这里摘录一段话” 哪有什么岁月静好，只是有人替你负重前行 “ 。</p><p>&ensp; &ensp; 当我写下这些文字的时候，当你读到这篇文字的时候。代表着我是安静的在仔细地翻阅着我的过去。</p><p>&ensp; &ensp; 在一个安静的环境下 听着的音乐一个人码字，如今也是一种享受。</p><hr><blockquote><p>当一切繁华褪去，才发现，我们，只是，在原地打了个转。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;blockquote-center&quot;&gt; 不管生活怎样
总有一道属于你的明媚阳光
用你的脚步走出自己的风景&lt;/blockquote&gt;

&lt;p&gt;&amp;ensp; &amp;ensp; 不知不觉大一就这样结束了，没事的时候总喜欢回忆这一年里发生的一切，所以会把回忆记录在博客里， 感觉自己学会了很多knowledge，明白了很多的事理，经历过心态的起伏，但是我一直坚持着做一个真正的我。成长中的自己很开心。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lwju.xyz/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>暗时间</title>
    <link href="http://lwju.xyz/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/DarkTime/"/>
    <id>http://lwju.xyz/时间管理/DarkTime/</id>
    <published>2019-06-23T06:11:35.000Z</published>
    <updated>2019-11-11T09:22:35.778Z</updated>
    
    <content type="html"><![CDATA[<p>如果你有一台计算机，你装了一个系统之后就整天把它搁置在那里，你觉得这台计算机被实际使用了吗？没有。因为CPU整天运行的就是空闲进程。运行空闲进程也是一天，运行大数据量计算的程序也是一天，对于CPU来说同样的一天，价值却是完全不一样的。</p><p>大脑也是如此。</p><a id="more"></a><p>善于利用思维时间的人，可以无形中比别人多出很多时间，从而实际意义上能比别人多活很多年。我们经常听说“心理年龄”这个词，思考得多的人，往往心理年龄更大。有人用10年才能领悟一个道理，因为他们是被动领悟——只有在现实撞到他脸上的时候才感到疼，疼完了之后还是不记得时时提醒自己，结果很快时过境迁抛之脑后，等到第二次遇到同一个坑的时候早忘了曾经跌过跟头了，像这样的效率，除非天天摔坑里，否则遗忘的效率总是大过吃亏长的记性。善于利用思维时间的人则能够在重要的事情上时时主动提醒自己，将临时的记忆变成硬编码的行为习惯。</p><p>每个人的手表都走得一样快，但每个人的生命却不是。衡量一个人生活了多少年，应该用思维时间来计算。举一个极端的例子，如果一个人从生下来开始就呆在一个为他特殊建造的无菌保护室里，没有社会交往，没有知识获取，度过了18年，你会不会认为他成年了？</p><p>认为时间对每个人是均等的是一个错觉，认为别人有一天，我也有一天，其实根本不是这样。如果你正在学习一门专业，你使用自己所投入的天数来衡量，很容易会产生一种错觉，认为投入了不少时间，然而其实，“投入时间”这个说法本身就是荒唐的，实际投入的是时间和效率的乘积。你可以“投入”很多时间在一件事情上面，却发现毫无进展，因为你没有整天把你要做的事情，要学习的东西常驻在你的大脑中，时刻给予它最高的优先级。你走路的时候吃饭的时候，做梦的时候心心念念想的就是这件事情，你的CPU总是分配给它，这个时候你的思维时间就被利用到了极致，你投入的时间就真正等于了实际流逝的时间，因为你的CPU是满载的。</p><p>如果你有做总结的习惯，你在度过一段时间之后总结自己在某某领域投入了多少时间，建议千万不要粗略地去计算有多少天下班后拿起书来翻看过，因为这样你也许会发现书倒是常翻，但领悟却不见得多深，表面上花的时间不少，收益却不见得那么大。因为看书并记住书中的东西只是记忆，并没有涉及推理，只有靠推理才能深入理解一个事物，看到别人看不到的地方，这部分推理的过程就是你的思维时间，也是人一生中占据一个显著比例的“暗时间”，你走路、买菜、洗脸洗手、坐公车、逛街、出游、吃饭、睡觉，所有这些时间都可以成为“暗时间”，你可以充分利用这些时间进行思考，反刍和消化平时看和读的东西，让你的认识能够脱离照本宣科的层面。这段时间看起来微不足道，但日积月累将会产生庞大的效应。</p><p>能够充分利用暗时间的人将无形中多出一大块生命，你也许会发现这样的人似乎玩得不比你少，看得不比你多，但不知怎么的就是比你走得更远。比如我就经常发现一些国外的牛人们为什么不仅学习牛逼，连“业余”玩儿的东东也都搞得特牛逼，一点都不业余（上次在《How We Decide》上看到斯坦福的一个牛人，理论物理学博士，同时是世界扑克大赛的前六名保持者，迄今累计奖金拿了六百多万刀），你会奇怪，这些家伙到底哪来的时间，居然可以在不止一个领域做到卓越？</p><p>程序员们都知道，任务切换需要耗费许多额外的花销，通俗地来讲，首先需要保存当前上下文以便下次能够顺利切换回来，然后要加载目标任务的上下文。如果一个系统不停地在多个任务之间来回倒腾，就会耗费大量的时间在上下文切换上，无形中浪费很多的时间。</p><p>相比之下，如果只做一件任务，就不会有此损失。这就是为什么专注的人比不专注的人时间利用效率高得多的原因。任务切换的暗时间看似非常不明显，甚至很多人认为“多任务”是件很好的事情（有时候的确是），但日积月累起来就会发现，消耗在切换上的时间越来越多。</p><p>另外，大脑开始一件任务的时候必须要有一定时间来“热身”，这个时间因人而异，并且可以通过练习来改变。举个例子，你看了一会书之后，忽然感到一阵无聊，忍不住打开浏览器，十分钟后你想起来还要继续看书，但要回复到当时理想的状态，却需要一段时间来努力去集中精力，把记忆中相关的知识全都激活起来，从而才能进入“状态”，因为你上了十分钟网之后这些记忆已经被抑制了。如果这个“热身”状态需要一刻钟，那么看似十分钟的上网闲逛其实就花费了二十五分钟。</p><p>如果阅读的例子还不够生动，对于程序员来说其实有更好的例子：你写程序写得正high，忽然被叫去开了一通会，写到一半的代码搁在那儿。等你开完会回来你需要多久能够重新进入状态？又或者，你正在调试程序，你已经花了二十分钟的时间把与这个bug可能相关的代码前前后后都理解了一遍，心中构建了一个大致的地图，就在这时，呃，你又被叫去开了个会(:D)，开完会回来，可想而知，得花上一些时间来回想一下刚刚弄清的东西了。</p><p>迅速进入状态的能力是可以锻炼的，根据我个人的经验，至少可以缩短到3-5分钟。但要想完全进入状态，却是很难在这么短的时间实现的。所谓完全进入状态，举个例子：你看了3个小时的书，或者调试了半个小时的程序之后，往往满脑子都是相关的东西，所有这些知识都处在活跃状态，换言之你大脑中所有相关的记忆神经网络都被激活了，要达到这样一种忘记时间流逝的“沉浸”状态（心理学上叫做“流体验”），不是三两分钟的事情。而一旦这种状态被破坏，无形间效率就会大打折扣。这也是为什么我总是倾向于创造大块的时间来阅读重要的东西，因为这样有利于“沉浸”进去，使得新知识可以和大脑中与其相关的各种既有的知识充分融合，关联起来，后者对于深刻的记忆非常有帮助。</p><p>要充分利用暗时间，不仅要能够迅速进入状态，另一个很重要的习惯就是能够保持状态多久（思维体力）。《The Psychology of Invention in the Mathematical Field》上有一段关于庞加莱的思考习惯的介绍，很有代表性。庞加莱经常在去海边休假或者在路上走的时候在脑海中思索数学问题，很多时候解答就在这些时候忽然闪现。虽然我和庞加莱是没法比的，但是常常也在路上想出答案，这真是一种愉悦的体验。</p><p>能够迅速进入专注状态，以及能够长期保持专注状态，是高效学习的两个最重要习惯。</p><p>很多人都有这样的体验（包括我自己），工作了之后，要处理的事情一下多出了很多，不像在校园，环境简单，生活单纯，能够心无旁骛地做一件事情而不被打扰。工作之后的状况就是，首先需要处理的事情变多，导致时不时需要在多个任务之间切换；另一方面，即便能够把任务的优先级分配得比较合理，也难免在做一件事情的时候心中忽然想起另一件事还没做的焦虑来，因为没做完的事情会在大脑中留下一个“隐藏的进程”，时不时地发个消息提醒你一下，中断你正在做的事情。</p><p>因此这里就涉及到最后一个高效的习惯：抗干扰。只有具备超强的抗干扰能力，才能有效地利用起前面提到的种种暗时间。抗干扰能力也是可以练习出来的，上本科那会经常坐车，所以我就常常拿着本大部头在车上看，坐着看或者站着看都可，事实证明在有干扰的环境中看书是非常锻炼专注能力的一个办法:D 另外，经常利用各种碎片时间阅读和思考，对迅速集中注意力和保持注意力都非常有帮助。记得很久以前TopLanguage上大伙曾经有次饶有兴趣地讨论“马桶时间”的利用，包括在卫生间放个小书柜。（估计很多同学心有戚戚焉吧:D）</p><blockquote><pre><code>——刘未鹏 | Mind Hacks</code></pre><p>原文地址：<a href="http://mindhacks.cn/2009/12/20/dark-time/" target="_blank" rel="noopener">http://mindhacks.cn/2009/12/20/dark-time/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你有一台计算机，你装了一个系统之后就整天把它搁置在那里，你觉得这台计算机被实际使用了吗？没有。因为CPU整天运行的就是空闲进程。运行空闲进程也是一天，运行大数据量计算的程序也是一天，对于CPU来说同样的一天，价值却是完全不一样的。&lt;/p&gt;
&lt;p&gt;大脑也是如此。&lt;/p&gt;
    
    </summary>
    
    
      <category term="时间管理" scheme="http://lwju.xyz/categories/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="时间管理" scheme="http://lwju.xyz/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://lwju.xyz/Markdown/Markdown/"/>
    <id>http://lwju.xyz/Markdown/Markdown/</id>
    <published>2019-06-09T02:18:01.000Z</published>
    <updated>2019-11-11T09:13:54.272Z</updated>
    
    <content type="html"><![CDATA[<ul><li>代码块高亮</li><li>图片链接和图片上传</li><li>LaTex数学公式</li><li>表格和流程图</li><li>离线写博客</li><li>丰富的快捷键<a id="more"></a></li></ul><hr><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>加粗<code>Ctrl + B</code></li><li>斜体 <code>Ctrl + I</code></li><li>引用 <code>Ctrl + Q</code></li><li>插入链接 <code>Ctrl + L</code></li><li>插入代码 <code>Ctrl + K</code></li><li>插入图片 <code>Ctrl + G</code></li><li>提升标题 <code>Ctrl + H</code></li><li>有序列表 <code>Ctrl + O</code></li><li>无序列表 <code>Ctrl + U</code></li><li>横线 <code>Ctrl + R</code></li><li>撤销 <code>Ctrl + Z</code></li><li>重做 <code>Ctrl + Y</code></li></ul><hr><h4 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h4><blockquote><p>创建标题只需在文本前添加#。#的个数代表标题的级数。（还可以通过文本底下加- - -或===实现） </p></blockquote><h4 id="2-列表"><a href="#2-列表" class="headerlink" title="2.列表"></a>2.列表</h4><h5 id="创建无序列表只需在文本前加上-、-或-；有序列表可以直接在文本前加1-、2-、3-等。-列表也可以嵌套的"><a href="#创建无序列表只需在文本前加上-、-或-；有序列表可以直接在文本前加1-、2-、3-等。-列表也可以嵌套的" class="headerlink" title="创建无序列表只需在文本前加上-、+或 *；有序列表可以直接在文本前加1.、2.、3.等。(列表也可以嵌套的)"></a>创建无序列表只需在文本前加上-、+或 *；有序列表可以直接在文本前加1.、2.、3.等。(列表也可以嵌套的)</h5><blockquote><ul><li>项目</li><li>项目<ul><li>项目</li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol></blockquote><h5 id="创建一个自定义列表"><a href="#创建一个自定义列表" class="headerlink" title="创建一个自定义列表"></a>创建一个自定义列表</h5><blockquote><dl><dt>Markdown<br>:  Text-to-HTML conversion tool<br>Authors<br>:  John</dt><dd>Luke</dd></dl></blockquote><blockquote><ul><li><input disabled="" type="checkbox"> 计划任务</li><li><input checked="" disabled="" type="checkbox"> 完成任务</li></ul></blockquote><blockquote><p>注意：符号和文本之间需要有空格，前面要有空行。 </p></blockquote><h4 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h4><blockquote><p>引用他人材料时，只需在开头加&gt;(可嵌套使用)。可以通过添加空行来结束引用。 </p></blockquote><h4 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h4><blockquote><p>通过连续输入至少三个*实现，行内不能有其他东西。 </p></blockquote><h4 id="5-目录"><a href="#5-目录" class="headerlink" title="5.目录"></a>5.目录</h4><blockquote><p>在合适的地方输入[toc],便会根据标题自动生成可跳转的目录(注意：前面需要有空行)。 </p></blockquote><h4 id="6-脚注"><a href="#6-脚注" class="headerlink" title="6.脚注"></a>6.脚注</h4><blockquote><p>定义：一个具有注脚的文本。[^2]<br>使用：[^2]: 注脚的解释<br>效果：<br>一个具有注脚的文本。[^2]<br>[^2]: 注脚的解释</p></blockquote><h4 id="7-笔记本和标签"><a href="#7-笔记本和标签" class="headerlink" title="7.笔记本和标签"></a>7.笔记本和标签</h4><blockquote><p>语法为@(笔记本)[标签A|标签B],可以添加笔记本和与标签。 绑定印象笔记（Evernote）账号后，能够同步文章到印象笔记相应笔记本目录下。 </p></blockquote><h4 id="8-改变文本的样式、斜体、粗体与删除线"><a href="#8-改变文本的样式、斜体、粗体与删除线" class="headerlink" title="8.改变文本的样式、斜体、粗体与删除线"></a>8.改变文本的样式、斜体、粗体与删除线</h4><p>粗体（快捷键Ctrl+B）、斜体（快捷键Ctrl+I）及 删除线 的语法如下。</p><blockquote><p>*斜体*<br>*<em>粗体**<br>*<strong>加粗的斜体*</strong><br>*强调文本</em> <em>强调文本</em><br>*<em>加粗文本*</em> <strong>加粗文本</strong><br>==标记文本==<br><del>\</del>删除文本<del>~<br>H</del>2~O is是液体。<br>2^10^ 运算结果是 1024.</p><ul><li>文本注释也是必不可少的<br>Markdown将文本转换为 HTML。</li></ul><p>*[HTML]:   超文本标记语言</p></blockquote><h4 id="9-图片与链接"><a href="#9-图片与链接" class="headerlink" title="9.图片与链接"></a>9.图片与链接</h4><ul><li>图片插入快捷键Ctrl+G,将出现以下对话框，直接复制或插入。</li><li>链接插入快捷键Ctrl+L,将出现以下对话框，输入链接。</li><li>图片和链接语法如下,可以手动输入。<blockquote><p>1.! [name] (URL) ：<strong>示列</strong>:！[图片](./xxx.png )<br>![Alt](<a href="https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg" target="_blank" rel="noopener">https://avatar.csdn.net/7/7/B/1_ralf_hx163com.jpg</a>)<br>2.[链接](<a href="http://www.lwju.xyz)**示列**：[小文博客]" target="_blank" rel="noopener">http://www.lwju.xyz)**示列**：[小文博客]</a>(<a href="http://www.lwju.xyz" target="_blank" rel="noopener">http://www.lwju.xyz</a> )<br>3.链接: [link](<a href="http://www.lwju.xyz" target="_blank" rel="noopener">http://www.lwju.xyz</a>). <strong>示列</strong>：链接: <a href="http://www.lwju.xyz" target="_blank" rel="noopener">小文博客</a>.<br>图片与链接的格式相似，相差一个！。</p></blockquote></li></ul><h4 id="10-设定居中、居左、居右-、字体、字号与颜色"><a href="#10-设定居中、居左、居右-、字体、字号与颜色" class="headerlink" title="10. 设定居中、居左、居右 、字体、字号与颜色"></a>10. 设定居中、居左、居右 、字体、字号与颜色</h4><p>在原生减价中对齐文本是不可能的。不过，您可以使用内嵌HTML标签对齐文本。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;div align = "center"&gt;居中&lt;/div&gt;</span><br><span class="line">&gt;&lt;div style="text-align: center"&gt; 居中 &lt;/div&gt;</span><br><span class="line">&gt;&lt;div style="text-align: right"&gt; 右对齐 &lt;/div&gt;</span><br><span class="line">&gt;&lt;div style="text-align: left"&gt; 左对齐 &lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。但是它本身是不支持修改字体、字号与颜色等功能的！</li><li>对，就是内嵌HTML，接下来要讲的功能就需要使用内嵌HTML的方法来实现。</li><li>字体，字号和颜色编辑如下代码<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">&gt;&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;</span><br><span class="line">&gt;&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</span><br><span class="line">&gt;&lt;font color=#0099ff size=7 face=&quot;黑体&quot;&gt;color=#0099ff size=72 face=&quot;黑体&quot;&lt;/font&gt;</span><br><span class="line">&gt;&lt;font color=#00ffff size=72&gt;color=#00ffff&lt;/font&gt;</span><br><span class="line">&gt;&lt;font color=red size=72&gt;color=red&lt;/font&gt;</span><br></pre></td></tr></table></figure>Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3</li></ul><h4 id="11-背景色"><a href="#11-背景色" class="headerlink" title="11. 背景色"></a>11. 背景色</h4><blockquote><p>Markdown本身不支持背景色设置，需要采用内置html的方式实现：借助 table, tr, td 等表格标签的 &gt;bgcolor 属性来实现背景色的功能。举例如下：<br><code>&lt;table&gt;&lt;tr&gt;&lt;td bgcolor=orange&gt;背景色是：orange&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</code></p><table><tr><td bgcolor=orange>背景色是：orange</td></tr></table></blockquote><h4 id="12-代码块"><a href="#12-代码块" class="headerlink" title="12.代码块"></a>12.代码块</h4><p>代码块可分为行内代码和区块代码。他们都是通过反引号“ ` ”实现的。行内代码前后只需要一个反引号；区块代码则需要三个反引号。 </p><ul><li>如何插入一段漂亮的代码片<br>下面展示同样高亮的 <code>代码片</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// An highlighted block</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br></pre></td></tr></table></figure><h4 id="13-转义"><a href="#13-转义" class="headerlink" title="13. 转义"></a>13. 转义</h4><blockquote><p>\ +你要转义的字符<br><code>^@^</code></p></blockquote><h4 id="14-制作待办事宜"><a href="#14-制作待办事宜" class="headerlink" title="14.制作待办事宜"></a>14.制作待办事宜</h4><blockquote><p>- [ ] 未处理<br>- [x]已处理</p></blockquote><h4 id="15-LaTeX数学公式"><a href="#15-LaTeX数学公式" class="headerlink" title="15.LaTeX数学公式"></a>15.LaTeX数学公式</h4><h5 id="标记公式"><a href="#标记公式" class="headerlink" title="标记公式"></a>标记公式</h5><p>LaTeX的数学公式有两种：行内公式和块级公式。行内公式放在文中与其它文字混编，块级公式单独成行。都使用美元符号进行标记显示。</p><blockquote><ul><li>行内公式<br>标记方法：使用一个美元符号包围起来<br>行内公式：$\Gamma(n) = (n-1)!\quad\forall nin\mathbb N$<br>效果：$\Gamma(n) = (n-1)!\quad\forall nin\mathbb N$<br>上标和下标<br>^表示上标，_表示下标。如果上下标的内容多于一个字符，要用{}把这些内容括起来当成一个整体。上下标是可以嵌套的，也可以同时使用。<br>例子：  $x^{y^z}=(1+e^x)^{-2xy^w}$</li></ul></blockquote><h4 id="16-表格"><a href="#16-表格" class="headerlink" title="16.表格"></a>16.表格</h4><blockquote><p>通过管线图的方式实现。示列如下：<br>| \姓名  | 年龄 | 性别  |<br>| :——– | -——-:| :——: |<br>| 王某| 20 | 男  |<br>效果如下：<br>| 姓名  | 年龄 | 性别  |<br>| :——– | ——–:| :——: |<br>| 王某| 20 | 男  |</p></blockquote><blockquote><h5 id="设定内容居中、居左、居右"><a href="#设定内容居中、居左、居右" class="headerlink" title="设定内容居中、居左、居右"></a>设定内容居中、居左、居右</h5><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右<br>| 第一列       | 第二列         | 第三列        |<br>|:———–:| ————-:|:————-|<br>| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 | </p></blockquote><h4 id="17-流程图"><a href="#17-流程图" class="headerlink" title="17.流程图"></a>17.流程图</h4><blockquote><p>流程图的代码需要放在一个语法类型为flow的代码块中。具体步骤如下：</p></blockquote><blockquote><p>定义节点：节点类型有start、operation、condition、end等<br>连接节点：使用-&gt;</p></blockquote><h4 id="18-新的甘特图功能，丰富你的文章"><a href="#18-新的甘特图功能，丰富你的文章" class="headerlink" title="18.新的甘特图功能，丰富你的文章"></a>18.新的甘特图功能，丰富你的文章</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line">        section 现有任务</span><br><span class="line">        已完成               :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        进行中               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        计划一               :         des3, after des2, 5d</span><br><span class="line">        计划二               :         des4, after des3, 5d</span><br></pre></td></tr></table></figure><h4 id="19-UML-图表"><a href="#19-UML-图表" class="headerlink" title="19. UML 图表"></a>19. UML 图表</h4><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">Mermaid</a>. 例如下面产生的一个序列图：:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?</span><br><span class="line">李四--&gt;&gt;王五: 你最近怎么样，王五？</span><br><span class="line">李四--x 张三: 我很好，谢谢!</span><br><span class="line">李四-x 王五: 我很好，谢谢!</span><br><span class="line">Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.</span><br><span class="line"></span><br><span class="line">李四--&gt;&gt;张三: 打量着王五...</span><br><span class="line">张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</span><br></pre></td></tr></table></figure><p>这将产生一个流程图。:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[长方形] -- 链接 --&gt; B((圆))</span><br><span class="line">A --&gt; C(圆角长方形)</span><br><span class="line">B --&gt; D&#123;% raw %&#125;菱形&#125;&#123;% endraw %&#125;</span><br><span class="line">C --&gt; D</span><br></pre></td></tr></table></figure><h4 id="20-FLowchart流程图"><a href="#20-FLowchart流程图" class="headerlink" title="20. FLowchart流程图"></a>20. FLowchart流程图</h4><p>我们依旧会支持flowchart的流程图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flowchat</span><br><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><p>####21.离线写博客</p><blockquote><p>即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入write.blog.csdn.net/mdeditor即可。Markdown编辑器使用浏览器离线存储将内容保存在本地。</p></blockquote><blockquote><p>用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。</p></blockquote><blockquote><p>博客发表后，本地缓存将被删除。　</p></blockquote><blockquote><p>用户可以选择 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。</p></blockquote><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h5 id="Markdowm首行缩进方法"><a href="#Markdowm首行缩进方法" class="headerlink" title="Markdowm首行缩进方法"></a>Markdowm首行缩进方法</h5><p>一个空格大小的表示：&amp; ensp;或&amp; #8194;，此时只要在相应需要缩进的段落前加上 4个 如上的标记即可，注意要带上分号。<br>两个空格的大小表示：&amp; emsp;或&amp; #8195;，同理，使用2个即可缩进2个汉字，推荐使用该方式。<br>不换行空格：&amp; bsp;或&#160;，使用4个&amp; #160;即可。</p><h5 id="HTML中的实体空格"><a href="#HTML中的实体空格" class="headerlink" title="HTML中的实体空格"></a>HTML中的实体空格</h5><p>  HTML提供了5种空格实体（space entity），它们拥有不同的宽度，非断行空格（&amp; nbsp;）是常规空格的宽度，可运行于所有主流浏览器。其他几种空格（&amp; ensp; &amp; emsp; &amp; thinsp; &amp; zwnj; &amp; zwj;）在不同浏览器中宽度各异。</p><ul><li><p>&amp; nbsp;</p><blockquote><p>它叫不换行空格，全称是 No-Break Space，它是最常见和我们使用最多的空格，大多数的人可能只接触了&nbsp;，它是按下space键产生的空格。在HTML中，如果你用空格键产生此空格，空格是不会累加的（只算1个）。要使用html实体表示才可累加，该空格占据宽度受字体影响明显而强烈。</p></blockquote></li><li><p>&amp; ensp;</p></li></ul><blockquote><p>它叫“半角空格”，全称是 En Space，en是字体排印学的计量单位，为em宽度的一半。段落前空格根据定义，它等同于字体度的一半（如16px字体中就是8px）。名义上是小写字母n的宽度。此空格传承空格家族一贯的特性：透明的，此空格有个相当稳健的特性，就是其占据的宽度正好是1/2个中文宽度，而且基本上不受字体影响。</p></blockquote><ul><li>&amp; emsp;</li></ul><blockquote><p>它叫“全角空格”，全称是 Em Space，em是字体排印学的计量单位，相当于当前指定的点数。例如，1 em在16px的字体中就是16px。此空格也传承空格家族一贯的特性：透明的，此空格也有个相当稳健的特性，就是其占据的宽度正好是1个中文宽度，而且基本上不受字体影响。</p></blockquote><ul><li>&amp; thinsp;</li></ul><blockquote><p>它叫“窄空格”，全称是 Thin Space。我们不妨称之为“瘦弱空格”，就是该空格长得比较瘦弱，身体单薄，占据的宽度比较小。它是em之六分之一宽。</p></blockquote><ul><li>&amp; zwnj;</li></ul><blockquote><p>它叫零宽不连字，全称是 Zero Width Non Joiner，简称“ZWNJ”，是一个不打印字符，放在电子文本的两个字符之间，抑制本来会发生的连字，而是以这两个字符原本的字形来绘制。Unicode中的零宽不连字字符映射为“”（zero width non-joiner，U+200C），HTML字符值引用为： “‌”</p></blockquote><ul><li>&amp; zwj;</li></ul><blockquote><p>它叫零宽连字，全称是 Zero Width Joiner，简称“ZWJ”，是一个不打印字符，放在某些需要复杂排版语言（如阿拉伯语、印地语）的两个字符之间，使得这两个本不会发生连字的字符产生了连字效果。零宽连字符的Unicode码位是U+200D (HTML: ‍ ‍）。<br>4. 锚点<br>网页中，锚点其实就是页内超链接，也就是链接本文档内部的某些元素，实现当前页面中的跳转。比如我这里写下一个锚点，点击回到目录，就能跳转到目录。 在目录中点击这一节，就能跳过来。还有下一节的注脚。这些根本上都是用锚点来实现的。</p></blockquote><p>注意： </p><ol><li>Markdown Extra 只支持在标题后插入锚点，其它地方无效。 </li><li>Leanote 编辑器右侧显示效果区域暂时不支持锚点跳转，所以点来点去发现没有跳转不必惊慌，但是你发布成笔记或博文后是支持跳转的。</li></ol><p>语法描述：<br>在你准备跳转到的指定标题后插入锚点{#标记}，然后在文档的其它地方写上连接到锚点的链接。</p><p>代码：跳转到<a href="#index">标题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;代码块高亮&lt;/li&gt;
&lt;li&gt;图片链接和图片上传&lt;/li&gt;
&lt;li&gt;LaTex数学公式&lt;/li&gt;
&lt;li&gt;表格和流程图&lt;/li&gt;
&lt;li&gt;离线写博客&lt;/li&gt;
&lt;li&gt;丰富的快捷键
    
    </summary>
    
    
      <category term="Markdown" scheme="http://lwju.xyz/categories/Markdown/"/>
    
    
  </entry>
  
</feed>
